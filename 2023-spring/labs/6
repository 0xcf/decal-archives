

<!DOCTYPE html>

<html lang="en-US">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">

  

  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">

  <link rel="stylesheet" href="/assets/css/just-the-docs-default.css">

  

  
    <script type="text/javascript" src="/assets/js/vendor/lunr.min.js"></script>
  
  <script type="text/javascript" src="/assets/js/just-the-docs.js"></script>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Lab 6 - Web Servers | Sysadmin DeCal</title>
<meta name="generator" content="Jekyll v3.9.2" />
<meta property="og:title" content="Lab 6 - Web Servers" />
<meta name="author" content="Nikhil Jha, Ben Cuan" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="A course covering the basics of setting up and administering a production-quality Linux server environment." />
<meta property="og:description" content="A course covering the basics of setting up and administering a production-quality Linux server environment." />
<link rel="canonical" href="https://decal.ocf.berkeley.edu/labs/6/" />
<meta property="og:url" content="https://decal.ocf.berkeley.edu/labs/6/" />
<meta property="og:site_name" content="Sysadmin DeCal" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Lab 6 - Web Servers" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","author":{"@type":"Person","name":"Nikhil Jha, Ben Cuan"},"description":"A course covering the basics of setting up and administering a production-quality Linux server environment.","headline":"Lab 6 - Web Servers","url":"https://decal.ocf.berkeley.edu/labs/6/"}</script>
<!-- End Jekyll SEO tag -->


  

</head>

<span style="display: none">
  
@import "./support/support";
@import "./color_schemes/";
@import "./modules";
@import "./custom/custom";


</span>
<body>
  <div id="loading" style="height:140%;width:140%;background-color:#ffffff;position:absolute;z-index:1000;left:-20%;top:-20%"></div>
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="svg-link" viewBox="0 0 24 24">
      <title>Link</title>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link">
        <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
      </svg>
    </symbol>
  </svg>
  <div class="side-bar lab-side-bar">
    <div class="site-header">
      <a href="/" class="site-title lh-tight">
        Sysadmin DeCal
      </a>
      <a href="#" id="menu-button" class="site-button">
        <svg viewBox="0 0 24 24" class="icon"><use xlink:href="#svg-menu"></use></svg>
      </a>
    </div>
    <nav role="navigation" aria-label="Main" id="site-nav" class="site-nav">      
      <button type="button" name="theme-toggle" class="btn theme-btn" onclick="toggleDark()">Toggle Dark Theme</button>
      <ol><li><a href="#overview">Overview</a></li><li><a href="#which-networked-services-are-already-running">Which networked services are already running?</a></li><li><a href="#dns">DNS</a></li><li><a href="#load-balancing">Load Balancing</a><ol><li><a href="#part-1-configuration">Part 1: Configuration</a></li><li><a href="#part-2-health-checks">Part 2: Health Checks</a></li><li><a href="#some-hints-for-parts-1-2">Some hints for Parts 1-2</a></li><li><a href="#part-3-crashing">Part 3: Crashing</a></li></ol></li></ol>

    </nav>
    </div>
  </div>
  <div id="main" class="main">
    <div id="main-content-wrap" class="main-content-wrap">
      
        
      
      <div id="main-content" class="main-content" role="main">
        <h1 style="margin-bottom:0">Lab 6 - Web Servers</h1>
        
        <p>Facilitator: <a href="/staff#kian,-rjz">Kian, Rjz</a></p>
        
        
        10 min read
        
          <h2 class="no_toc text-delta" id="table-of-contents">
        
        
          <a href="#table-of-contents" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Table of contents
        
        
      </h2>
    

<ol id="markdown-toc">
  <li><a href="#overview" id="markdown-toc-overview">Overview</a></li>
  <li><a href="#which-networked-services-are-already-running" id="markdown-toc-which-networked-services-are-already-running">Which networked services are already running?</a></li>
  <li><a href="#dns" id="markdown-toc-dns">DNS</a></li>
  <li><a href="#load-balancing" id="markdown-toc-load-balancing">Load Balancing</a>    <ol>
      <li><a href="#part-1-configuration" id="markdown-toc-part-1-configuration">Part 1: Configuration</a></li>
      <li><a href="#part-2-health-checks" id="markdown-toc-part-2-health-checks">Part 2: Health Checks</a></li>
      <li><a href="#some-hints-for-parts-1-2" id="markdown-toc-some-hints-for-parts-1-2">Some hints for Parts 1-2</a></li>
      <li><a href="#part-3-crashing" id="markdown-toc-part-3-crashing">Part 3: Crashing</a></li>
    </ol>
  </li>
</ol><hr />
      <h2 id="overview">
        
        
          <a href="#overview" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Overview
        
        
      </h2>
    

<p>Networking is key to many services because it allows processes and computers to
communicate with each other. In this lab, we’ll explore different networked services with an emphasis on web services.</p>

<p>Make sure that you are doing all of these steps on your VM.</p>
      <h2 id="which-networked-services-are-already-running">
        
        
          <a href="#which-networked-services-are-already-running" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Which networked services are already running?
        
        
      </h2>
    

<p>There are multiple networked services running on your VM right now. To output the networked services running on the VM use <code class="language-plaintext highlighter-rouge">netstat</code> (install using apt).</p>

<ul>
  <li><strong>Question 1a:</strong> What command did you use to display the networked services?</li>
  <li><strong>Question 1b:</strong> Paste the output of the command.</li>
  <li><strong>Question 1c:</strong> Choose one service from the output and describe what it does.</li>
</ul>
      <h2 id="dns">
        
        
          <a href="#dns" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> DNS
        
        
      </h2>
    

<p>In this section we are going to be setting up our own DNS server! Remember that
DNS is the system that maps from a domain like <code class="language-plaintext highlighter-rouge">ocf.berkeley.edu</code> to an IP like
<code class="language-plaintext highlighter-rouge">169.229.226.23</code> (and <code class="language-plaintext highlighter-rouge">2607:f140:8801::1:23</code> for IPv6) so that computers know
how to send information over the network to servers without people having to
remember a bunch of numbers to connect to everything.</p>

<p>First, install the <code class="language-plaintext highlighter-rouge">bind9</code> package on your VM to set up a DNS server. Uninstall <code class="language-plaintext highlighter-rouge">dnsmasq</code> if it’s previously installed on your VM by <code class="language-plaintext highlighter-rouge">sudo apt purge dnsmasq</code>.</p>

<p>Let’s check the status of the service using <code class="language-plaintext highlighter-rouge">systemctl</code>. <strong>What command can you run to do this?</strong></p>

<p>In the output of the <code class="language-plaintext highlighter-rouge">systemctl</code> command, you should see that the <code class="language-plaintext highlighter-rouge">bind9</code>
service is already running. Let’s bring it down temporarily so we can
investigate: <code class="language-plaintext highlighter-rouge">systemctl stop bind9</code></p>

<p>The service should have a unit file at <code class="language-plaintext highlighter-rouge">/lib/systemd/system/named.service</code> or
<code class="language-plaintext highlighter-rouge">/lib/systemd/system/bind9.service</code>. If you print that file (with <code class="language-plaintext highlighter-rouge">cat</code> or
<code class="language-plaintext highlighter-rouge">systemctl cat bind9</code>), you should see something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=BIND Domain Name Server
Documentation=man:named(8)
After=network.target
Wants=nss-lookup.target
Before=nss-lookup.target

[Service]
EnvironmentFile=-/etc/default/named
ExecStart=/usr/sbin/named -f $OPTIONS
ExecReload=/usr/sbin/rndc reload
ExecStop=/usr/sbin/rndc stop

[Install]
WantedBy=multi-user.target
Alias=bind9.service
</code></pre></div></div>

<p>This should look somewhat familiar to you after the lecture on networking! Don’t
worry if it doesn’t all look familiar since there are some options you haven’t
seen yet in here, but you should at least recognize some of the options used.</p>

<p>If you now run <code class="language-plaintext highlighter-rouge">dig ocf.berkeley.edu @localhost</code> from your VM, you should see
that the command eventually times out after trying to run for about 15 seconds.
This is because it is trying to send DNS requests to your VM, but the DNS
server is not actually running yet so it doesn’t get a response. However, if
<code class="language-plaintext highlighter-rouge">@localhost</code> is left off the end of the command, it succeeds. Why is this the
case? What DNS server are requests currently being sent to if <code class="language-plaintext highlighter-rouge">@localhost</code> is
not specified in the command?</p>

<p>Try starting the DNS server using the relevant <code class="language-plaintext highlighter-rouge">systemctl</code> command. If you
check the status of the <code class="language-plaintext highlighter-rouge">bind9</code> service after starting it, you should see the
status has changed to say that the service is active and running.</p>

<p>If you now run <code class="language-plaintext highlighter-rouge">dig ocf.berkeley.edu @localhost</code> from your VM, you should now
see a response containing the correct IP (<code class="language-plaintext highlighter-rouge">169.229.226.23</code>)!</p>

<p>Now to the exciting part, the configuration! Edit <code class="language-plaintext highlighter-rouge">/etc/bind/named.conf.local</code>
with your favorite text editor (add sudo if you don’t have write permission). Inside this file, it should be empty apart
from a few comments at the top because you haven’t done any local configuration
yet. Add a new zone in this file for <code class="language-plaintext highlighter-rouge">example.com</code> with these contents:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zone "example.com" {
  type master;
  file "/etc/bind/db.example.com";
};
</code></pre></div></div>

<p>Then, create a file <code class="language-plaintext highlighter-rouge">/etc/bind/db.example.com</code> to contain the responses to give
if anyone sends requests to your DNS server for <code class="language-plaintext highlighter-rouge">example.com</code>. The easiest way
to do this is generally to copy an existing config and then make changes from
there to get what you want for your config instead of having to start from
scratch.</p>

<p>To make this easier, we’ve provided a valid config in 
<a href="https://github.com/0xcf/decal-labs/blob/master/6/db.example.com">decal-labs</a>
that you can copy in place at
<code class="language-plaintext highlighter-rouge">/etc/bind/db.example.com</code>.</p>

<p>Let’s start by adding a record for a subdomain named <code class="language-plaintext highlighter-rouge">test.example.com</code>.</p>

<p>Add the line below to <code class="language-plaintext highlighter-rouge">/etc/bind/db.example.com</code>.</p>

<p><code class="language-plaintext highlighter-rouge">test	IN	A	93.184.216.34</code></p>

<p>Make sure to reload the <code class="language-plaintext highlighter-rouge">bind9</code> service after changing anything in <code class="language-plaintext highlighter-rouge">/etc/bind9</code>, since you want the running
service to change its configuration.</p>

<p><code class="language-plaintext highlighter-rouge">systemctl reload bind9</code></p>

<p>Now run the commands below. For the first command you should see the result for <code class="language-plaintext highlighter-rouge">example.com</code> which should be <code class="language-plaintext highlighter-rouge">1.2.3.4</code>.
For the second command you should see <code class="language-plaintext highlighter-rouge">93.184.216.34</code> as the result.</p>

<p><code class="language-plaintext highlighter-rouge">dig @localhost example.com</code></p>

<p><code class="language-plaintext highlighter-rouge">dig @localhost test.example.com</code></p>

<p>Please add few more records of your choice. Try to add one A record, and a couple of other
types of records (CNAME, SRV, TXT, etc.).  Make sure to reload the <code class="language-plaintext highlighter-rouge">bind9</code> after!</p>

<ul>
  <li>
    <p><strong>Question 2a:</strong> What is the systemctl command to show whether bind9 is running or not?</p>
  </li>
  <li>
    <p><strong>Question 2b:</strong> Why does the dig command (dig ocf.berkeley.edu) work if @localhost is not present at the end (if bind9 is not started) but times out when @localhost is added?</p>
  </li>
  <li>
    <p><strong>Question 2c:</strong> What additional entries did you add to your DNS server config (the db.example.com file)?</p>
  </li>
  <li>
    <p><strong>Question 2d:</strong> What commands did you use to make requests to the local DNS server for your additional entries?</p>
  </li>
</ul>
      <h2 id="load-balancing">
        
        
          <a href="#load-balancing" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Load Balancing
        
        
      </h2>
    

<p>For this section we will be using <a href="https://www.haproxy.org/">HAProxy</a>, a
commonly-used open-source load balancer. <a href="https://nginx.org/">NGINX</a> is
actually <a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/tcp-udp-load-balancer/">starting to become a load balancer</a> alongside being a web
server, which is pretty interesting, but HAProxy is still commonly used.</p>

<p>You can install HAProxy using <code class="language-plaintext highlighter-rouge">sudo apt install haproxy</code>.</p>

<p>First, grab the python file for the service you will be running from the
<a href="https://github.com/0xcf/decal-labs/blob/master/a7/server.py">decal-labs repo</a> using <code class="language-plaintext highlighter-rouge">wget</code> or something similar to download
it. You’ll likely also need to install <code class="language-plaintext highlighter-rouge">tornado</code> using <code class="language-plaintext highlighter-rouge">sudo apt install python3-tornado</code>.</p>

<p>When run (<code class="language-plaintext highlighter-rouge">python3 server.py</code>), this script will start up 6 different HTTP
server workers listening on ports 8080 to 8085 (inclusive). Each worker returns
different content to make it clear which one you are talking to for this lab
(“Hello, I am ID 0” for instance), but in real usage they would generally all
return the same content. You would still want something to distinguish between
them (maybe a HTTP header saying which host or instance they are?), but only
for debugging purposes, not like in this lab where they have actually differing
content.</p>

<p>You can test out each worker if you’d like by forwarding each of the ports
(from 8080-8085) and making a request individually to each server. If you need
a reminder on how to port forward from your VM, visit 
<a href="https://decal.ocf.berkeley.edu/labs/4/">lab 4</a>.</p>

<p>The idea behind using a load balancer is that requests will be spread out among
instances so that if a lot of requests are coming in all at once, they will not
overload any one instance. Another very useful feature is that if one of the
instances happens to crash or become unavailable for whatever reason, another
working server will be used instead. This requires some kind of health checks
to be implemented to decide whether a server is healthy or not.</p>

<p>Your job is to do the configuration to get it to work with the services you are given! The main
config file is at <code class="language-plaintext highlighter-rouge">/etc/haproxy/haproxy.cfg</code> and you should only have to append
to the end of this file to finish this lab. One snippet is provided here for you
to add to the config already, this will give you a nice status page that you
can use to see which of the servers is up or down:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>listen stats
  bind    0.0.0.0:7001
  mode    http
  stats   enable
  stats   hide-version
  stats   uri /stats
</code></pre></div></div>

<p>Make sure to forward ports 7000 and 7001 to allow access to your load balancer server and the
stats page from your local machine.</p>

<p>After adding this, if you restart the <code class="language-plaintext highlighter-rouge">haproxy</code> service and open
<code class="language-plaintext highlighter-rouge">http://localhost:7001/stats</code> in a web browser, you should see a
page with a table and some statistics information on HAProxy (pid, sessions,
bytes transferred, uptime, etc.).</p>
      <h3 id="part-1-configuration">
        
        
          <a href="#part-1-configuration" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 1: Configuration
        
        
      </h3>
    

<p>Your goal is to add a backend and frontend to haproxy’s config that proxies to
all of the running workers on the ports from 8080 to 8085 and listens on port
7000 on your VM, so that if you go to <code class="language-plaintext highlighter-rouge">http://localhost:7000</code> you
can see the responses from the workers. Try refreshing, what do you notice
happening? Do you notice a pattern? What <a href="http://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4-balance">load balancing algorithm</a>
are you using from your observations? What config did you add to the haproxy
config file to get this to work? Try changing the algorithm and see what 
happens to your results!</p>
      <h3 id="part-2-health-checks">
        
        
          <a href="#part-2-health-checks" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 2: Health Checks
        
        
      </h3>
    

<p>Now, after adding all the servers to the backend in the config, add health
checks for each of them. If you refresh the stats page, what do you notice has
changed? What color are each of the servers in your backend?</p>
      <h3 id="some-hints-for-parts-1-2">
        
        
          <a href="#some-hints-for-parts-1-2" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Some hints for Parts 1-2
        
        
      </h3>
    
<ul>
  <li>You shouldn’t need to change the current contents of <code class="language-plaintext highlighter-rouge">haproxy.cfg</code>; you’ll just need to append additional lines to the bottom of the file.</li>
  <li>You’ll need to add two sections, one for <code class="language-plaintext highlighter-rouge">frontend</code> and one for <code class="language-plaintext highlighter-rouge">backend</code>. Take a look at the Frontend and Backend sections of <a href="https://www.haproxy.com/blog/the-four-essential-sections-of-an-haproxy-configuration/">The Four Essential Sections of an HAProxy Configuration</a> to learn more about the syntax and options available!</li>
  <li>You can label your frontend and backend sections however you wish.</li>
  <li>You should need to append about 10-15 lines to the config file.</li>
  <li>If you’d like more hints, feel free to ask on #decal-general!</li>
</ul>
      <h3 id="part-3-crashing">
        
        
          <a href="#part-3-crashing" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 3: Crashing
        
        
      </h3>
    

<p>If you make a request to <code class="language-plaintext highlighter-rouge">http://localhost:7000/crash</code>, it will
crash the worker that you connect to. What changes in the HAProxy stats page?
(Try refreshing a few times, the health checks can take a couple seconds to
update the status from UP -&gt; DOWN) If you make a lot of requests to
<code class="language-plaintext highlighter-rouge">http://localhost:7000</code> again, are all the servers present in the
IDs that are returned in your requests or not? Try crashing a particular worker
by running <code class="language-plaintext highlighter-rouge">curl localhost:&lt;port&gt;/crash</code>, substituting the port with one of the
workers that is still up on your instance. What happens on the HAProxy stats
page? If you crash all the workers, what status code does HAProxy return to you
when you make a request to the service?</p>

<ul>
  <li>
    <p><strong>Question 3a:</strong> Do you notice any pattern when you refresh the page multiple times?</p>
  </li>
  <li>
    <p><strong>Question 3b:</strong> What load balancing algorithm are you using?</p>
  </li>
  <li>
    <p><strong>Question 3c:</strong> What did you add to the haproxy config? (just copy and paste the lines you added to the bottom into here)</p>
  </li>
  <li>
    <p><strong>Question 3d:</strong> What do you notice has changed on the stats page after adding health checks? What color are each of the servers in the backend now?</p>
  </li>
  <li>
    <p><strong>Question 3e:</strong> What changes in the stats page when you crash a worker? What happened to the pattern from before?</p>
  </li>
  <li>
    <p><strong>Question 3f:</strong> What HTTP status code (or error message) does HAProxy return if you crash all of the workers?</p>
  </li>
</ul>

<p><strong>Remember to submit your answers on Gradescope!</strong></p>

        
        <hr>
        <footer>
  <div class="col-lg-12 text-center">
    <p>
      <a href="https://www.nvidia.com/en-us/" class="no-underline">
        <img
          src="/assets/images/nvidia.png"
          style="height: 50px; width: 125px"
        />
      </a>
      <span>
        Thanks to
        <a href="https://www.nvidia.com">Nvidia</a> for sponsoring GPUs to the OCF.
      </span>
    </p>
    <p>
      <a href="https://www.linode.com" class="no-underline">
        <img
          src="/assets/images/linode.png"
          style="height: 50px; width: 125px"
        />
      </a>
      <span>
        Huge thanks to
        <a href="https://www.linode.com">Linode</a> for sponsoring the equipment
        used to record digital lectures for the Decal
      </span>
    </p>
    <p>
      <a href="https://www.ocf.berkeley.edu" class="no-underline">
        <img
          src="https://www.ocf.berkeley.edu/hosting-logos/ocf-hosted-penguin.svg"
          alt="Hosted by the OCF"
          style="border: 0"
      /></a>
      <span>
        Copyright &copy; 2017-2022
        <a href="https://www.ocf.berkeley.edu"> Open Computing Facility </a>
        and
        <a href="https://xcf.berkeley.edu"> eXperimental Computing Facility </a>
      </span>
    </p>
    <p>
      <span>
        This website and its course materials are licensed under the terms of the
        <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">
          CC BY-NC-SA 4.0
        </a>
        License.
        <a href="https://github.com/0xcf/decal-web/"> Source Code </a>
        available on GitHub
      </span>
    </p>
  </div>
  <!-- /.col-lg-12 -->
</footer>

      </div>
    </div>
  </div>

  <script>
    function setCookie(cname, cvalue, exdays) {
      const d = new Date();
      d.setTime(d.getTime() + (exdays*24*60*60*1000));
      let expires = "expires="+ d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
      let name = cname + "=";
      let decodedCookie = decodeURIComponent(document.cookie);
      let ca = decodedCookie.split(';');
      for(let i = 0; i <ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
          c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
          return c.substring(name.length, c.length);
        }
      }
      return "";
    }

    document.getElementById("loading").style["backgroundColor"] = getCookie("dark-mode") == 1 ? "#27262b" : "#ffffff" // Set the opaque layer to the prefered color

    window.addEventListener('load', (event) => {
      document.getElementById("loading").style = ""; // Remove the opaque layer when the page loads
    });


    let dark = !(window.matchMedia && 
    window.matchMedia('(prefers-color-scheme: dark)').matches); // Flip dark so we can run one toggle on load
    
    let preference = getCookie("dark-mode");

    if(preference == "1") {
      dark = false;
    } else if(preference == "0") {
      dark = true;
    }

    let toggleDark = () => { 
      jtd.setTheme(dark ? 'light' : 'dark'); 

      // Change input text placeholder text color

      const PLACEHOLDER_TEXT_COLOR = "#959396";

      if(!dark) {
        let placeholderStyleElem = document.head.appendChild(document.createElement("style"));
        placeholderStyleElem.id = "placeholderTextStyle"
        placeholderStyleElem.innerHTML = "::placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; opacity: 1 }\n"; // Firefox requires opacity
        placeholderStyleElem.innerHTML += ":-ms-input-placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; }\n"; // IE 10+
        placeholderStyleElem.innerHTML += "::-ms-input-placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; }\n"; // Edge
      } else {
        let placeholderStyleElem = document.getElementById("placeholderTextStyle");
        if(placeholderStyleElem) placeholderStyleElem.remove();
      }

      setCookie("dark-mode", dark ? "0" : "1", 3652); 
      dark = !dark;
    }
    toggleDark();
  </script>
</body>
</html>

