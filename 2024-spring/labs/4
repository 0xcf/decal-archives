

<!DOCTYPE html>

<html lang="en-US">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">

  

  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">

  <link rel="stylesheet" href="/assets/css/just-the-docs-default.css">

  

  
    <script type="text/javascript" src="/assets/js/vendor/lunr.min.js"></script>
  
  <script type="text/javascript" src="/assets/js/just-the-docs.js"></script>

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Lab 4 - Processes and Services | Sysadmin DeCal</title>
<meta name="generator" content="Jekyll v3.9.2" />
<meta property="og:title" content="Lab 4 - Processes and Services" />
<meta name="author" content="Nikhil Jha, Ben Cuan" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="A course covering the basics of setting up and administering a production-quality Linux server environment." />
<meta property="og:description" content="A course covering the basics of setting up and administering a production-quality Linux server environment." />
<link rel="canonical" href="https://decal.ocf.berkeley.edu/labs/4/" />
<meta property="og:url" content="https://decal.ocf.berkeley.edu/labs/4/" />
<meta property="og:site_name" content="Sysadmin DeCal" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Lab 4 - Processes and Services" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","author":{"@type":"Person","name":"Nikhil Jha, Ben Cuan"},"description":"A course covering the basics of setting up and administering a production-quality Linux server environment.","headline":"Lab 4 - Processes and Services","url":"https://decal.ocf.berkeley.edu/labs/4/"}</script>
<!-- End Jekyll SEO tag -->


  

</head>

<span style="display: none">
  
@import "./support/support";
@import "./color_schemes/";
@import "./modules";
@import "./custom/custom";


</span>
<body>
  <div id="loading" style="height:140%;width:140%;background-color:#ffffff;position:absolute;z-index:1000;left:-20%;top:-20%"></div>
  <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
    <symbol id="svg-link" viewBox="0 0 24 24">
      <title>Link</title>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link">
        <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
      </svg>
    </symbol>
  </svg>
  <div class="side-bar lab-side-bar">
    <div class="site-header">
      <a href="/" class="site-title lh-tight">
        Sysadmin DeCal
      </a>
      <a href="#" id="menu-button" class="site-button">
        <svg viewBox="0 0 24 24" class="icon"><use xlink:href="#svg-menu"></use></svg>
      </a>
    </div>
    <nav role="navigation" aria-label="Main" id="site-nav" class="site-nav">      
      <button type="button" name="theme-toggle" class="btn theme-btn" onclick="toggleDark()">Toggle Dark Theme</button>
      <ol><li><a href="#overview">Overview</a></li><li><a href="#part-0-set-up-networking">Part 0: Set up networking</a></li><li><a href="#part-1-using-systemd">Part 1: Using systemd</a><ol><li><a href="#what-services-are-running-right-now">What services are running right now?</a></li><li><a href="#controlling-services">Controlling Services</a></li><li><a href="#creating-a-service">Creating a service</a></li><li><a href="#debugging">Debugging</a></li><li><a href="#crash-the-service">Crash the service!</a></li></ol></li><li><a href="#part-2-processes">Part 2: Processes</a><ol><li><a href="#htop">htop</a></li><li><a href="#the-process-hierarchy">The process hierarchy</a></li><li><a href="#orphan-processes">Orphan processes</a></li></ol></li><li><a href="#exploration">Exploration</a></li><li><a href="#submission">Submission</a></li></ol>

    </nav>
    </div>
  </div>
  <div id="main" class="main">
    <div id="main-content-wrap" class="main-content-wrap">
      
        
      
      <div id="main-content" class="main-content" role="main">
        <h1 style="margin-bottom:0">Lab 4 - Processes and Services</h1>
        
        <p>Facilitator: <a href="/staff#michael-lisano,-albert-ye">Michael Lisano, Albert Ye</a></p>
        
        
        10 min read
        
          <h2 class="no_toc text-delta" id="table-of-contents">
        
        
          <a href="#table-of-contents" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Table of contents
        
        
      </h2>
    

<ol id="markdown-toc">
  <li><a href="#overview" id="markdown-toc-overview">Overview</a></li>
  <li><a href="#part-0-set-up-networking" id="markdown-toc-part-0-set-up-networking">Part 0: Set up networking</a></li>
  <li><a href="#part-1-using-systemd" id="markdown-toc-part-1-using-systemd">Part 1: Using systemd</a>    <ol>
      <li><a href="#what-services-are-running-right-now" id="markdown-toc-what-services-are-running-right-now">What services are running right now?</a></li>
      <li><a href="#controlling-services" id="markdown-toc-controlling-services">Controlling Services</a></li>
      <li><a href="#creating-a-service" id="markdown-toc-creating-a-service">Creating a service</a></li>
      <li><a href="#debugging" id="markdown-toc-debugging">Debugging</a></li>
      <li><a href="#crash-the-service" id="markdown-toc-crash-the-service">Crash the service!</a></li>
    </ol>
  </li>
  <li><a href="#part-2-processes" id="markdown-toc-part-2-processes">Part 2: Processes</a>    <ol>
      <li><a href="#htop" id="markdown-toc-htop">htop</a></li>
      <li><a href="#the-process-hierarchy" id="markdown-toc-the-process-hierarchy">The process hierarchy</a></li>
      <li><a href="#orphan-processes" id="markdown-toc-orphan-processes">Orphan processes</a></li>
    </ol>
  </li>
  <li><a href="#exploration" id="markdown-toc-exploration">Exploration</a></li>
  <li><a href="#submission" id="markdown-toc-submission">Submission</a></li>
</ol><hr />
      <h2 id="overview">
        
        
          <a href="#overview" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Overview
        
        
      </h2>
    
<p>For this lab, we are going to dive into processes and systemd. We will do this by writing our own systemd service from scratch, while showing the benefits of running a service with systemd. This lab should be completed on your Linux VM.</p>
      <h2 id="part-0-set-up-networking">
        
        
          <a href="#part-0-set-up-networking" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 0: Set up networking
        
        
      </h2>
    
<p>Before you start this lab, you’ll need to make sure you can access services from your VM in your web browser!</p>

<p>Our VMs support IPv6 only, so you will need to connect to the campus GlobalProtect VPN first if you don’t have IPv6 connectivity.</p>
      <h2 id="part-1-using-systemd">
        
        
          <a href="#part-1-using-systemd" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 1: Using systemd
        
        
      </h2>
    
      <h3 id="what-services-are-running-right-now">
        
        
          <a href="#what-services-are-running-right-now" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> What services are running right now?
        
        
      </h3>
    
<p>Run <code class="language-plaintext highlighter-rouge">systemctl</code>. You’ll see a long table of every unit known to systemd.
Let’s narrow it down to services for now. Run <code class="language-plaintext highlighter-rouge">systemctl --type=service</code>. Now you can see a list of all services running on your computer. Each of these services is a daemon running in the background. Do you see any familiar services running?</p>

<p><strong>Question 1:</strong> What is the name of a systemd service running on your system? What does it do? (If you’re not sure what it does, Google it!)</p>
      <h3 id="controlling-services">
        
        
          <a href="#controlling-services" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Controlling Services
        
        
      </h3>
    
<p>Now let’s use <code class="language-plaintext highlighter-rouge">systemd</code> to control a an nginx web server. If you don’t have it already, install nginx by issuing <code class="language-plaintext highlighter-rouge">sudo apt install nginx</code>. Once that is done we can tell systemd to start the service with the following: <code class="language-plaintext highlighter-rouge">sudo systemctl start nginx</code>. Run <code class="language-plaintext highlighter-rouge">systemctl status nginx</code> to ensure it is running.</p>

<blockquote>
  <p>Note: If you already have a webserver running, you may need to
shut it down, so that port 80 is available for nginx to use.</p>
</blockquote>

<p>Now let’s make nginx listen for connections on the nonstandard port 420. In <code class="language-plaintext highlighter-rouge">/etc/nginx/sites-available/default</code> change the following lines:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">listen</span> <span class="mi">80</span> <span class="s">default_server</span><span class="p">;</span>
<span class="k">listen</span> <span class="s">[::]:80</span> <span class="s">default_server</span><span class="p">;</span>
</code></pre></div></div>

<p>to:</p>

<div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">listen</span> <span class="mi">420</span> <span class="s">default_server</span><span class="p">;</span>
<span class="k">listen</span> <span class="s">[::]:420</span> <span class="s">default_server</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>TIP: The first line configures the server to listen on <em>IPv4</em>, and
the second line configures <em>IPv6</em>.</p>
</blockquote>

<p>Tell systemd that nginx has changed configuration and needs reloading with: <code class="language-plaintext highlighter-rouge">sudo systemctl reload nginx</code>.</p>

<p>Now, accessing http://[yourusername].decal.ocfhosted.com:80 should now give you a connection refused error and your webserver will only be accessible via http://[yourusername].decal.ocfhosted.com:420.</p>

<p>Note that not all services can be reloaded; systemd will notify you if this is the case and such services will have to be restarted instead with: <code class="language-plaintext highlighter-rouge">sudo systemctl restart yourservice</code>.</p>

<p>Finally go ahead and stop the nginx service with <code class="language-plaintext highlighter-rouge">sudo systemctl stop nginx</code>.</p>

<p><strong>Question 2:</strong> What is the difference between <code class="language-plaintext highlighter-rouge">systemctl reload yourservice</code> and <code class="language-plaintext highlighter-rouge">systemctl restart yourservice</code>?</p>

<p><strong>Question 3:</strong> Upload a screenshot of your browser accessing the nginx webserver at http://[yourusername].decal.ocfhosted.com:420.
Note: If you can’t access the IPv6 site use <code class="language-plaintext highlighter-rouge">curl localhost:420</code> on the VM and paste it’s contents (it should be a html page).</p>
      <h3 id="creating-a-service">
        
        
          <a href="#creating-a-service" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Creating a service
        
        
      </h3>
    
<p>Let’s set up a web server and create a systemd unit for it. Make sure <code class="language-plaintext highlighter-rouge">git</code> is installed; if it’s not, install it using <code class="language-plaintext highlighter-rouge">apt</code>.</p>

<p>If you don’t already have the decal-labs repo from a past lab, run the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/0xcf/decal-labs
</code></pre></div></div>

<p>The materials for this part of the lab will be in the <code class="language-plaintext highlighter-rouge">decal-labs/4</code> directory.
We will also need to install some dependencies. Go ahead and execute the following commands:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># apt update
# apt install build-essential make python3-virtualenv
</code></pre></div></div>

<p>Now run <code class="language-plaintext highlighter-rouge">./run</code>. This should start up a simple web server at http://localhost:5000. Note that by default you can only access the web server on the VM itself.</p>

<p>Your mission, should you choose to accept it, is to write a systemd service that manages this web server. To do this, make a new unit file in <code class="language-plaintext highlighter-rouge">/etc/systemd/system/toy.service</code>. Refer to the slides for an example; DigitalOcean also has a <a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files">good guide</a> on how to write systemd units. Here is a skeleton; all you need to do is fill in the values for each field.</p>

<div class="language-systemd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">[Unit]</span>
<span class="nt">Description</span><span class="p">=</span>
<span class="nt">Requires</span><span class="p">=</span>
<span class="nt">After</span><span class="p">=</span>

<span class="k">[Install]</span>
<span class="nt">WantedBy</span><span class="p">=</span>multi-user.target

<span class="k">[Service]</span>
<span class="nt">ExecStart</span><span class="p">=</span>
<span class="nt">User</span><span class="p">=</span>
</code></pre></div></div>

<p>Some questions worth considering while writing this unit file are:</p>
<ul>
  <li>What units needs to be started before a webserver starts? (Hint: you can get a list of special “target” units using <code class="language-plaintext highlighter-rouge">systemctl --type=target</code>.)</li>
  <li>What script should systemd run to start the webserver? (Remember you’ll need to use the absolute path of the script, not the relative one. You can find this by running <code class="language-plaintext highlighter-rouge">realpath -se &lt;path to script&gt;</code>.)</li>
  <li>Units run by root as default. Is that a safe practice for web servers?</li>
</ul>

<p>You are encouraged to experiment with other fields as suits your liking.
Once you have finished creating <code class="language-plaintext highlighter-rouge">toy.service</code>, let’s start the service and have the it start whenever our machine is booted.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># systemctl start toy.service
# systemctl enable toy.service
</code></pre></div></div>
      <h3 id="debugging">
        
        
          <a href="#debugging" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Debugging
        
        
      </h3>
    
<p>You can check if the unit file succeeded by running <code class="language-plaintext highlighter-rouge">systemctl status toy.service</code>. If you are having issues with the unit file or the web server, check the logs for this unit by running <code class="language-plaintext highlighter-rouge">journalctl -u toy.service</code>.  If you run into errors don’t get demoralized (it is, after all, only a decal); as a sysadmin you’ll have to become comfortable making sense of arcane error messages.</p>

<blockquote>
  <p>TIP: You can omit the <code class="language-plaintext highlighter-rouge">.service</code> in <code class="language-plaintext highlighter-rouge">systemctl</code> command for
speed. If the unit is another type (e.g. target, socket, or timer),
you must include the type. We include the <code class="language-plaintext highlighter-rouge">.service</code> for clarity.</p>
</blockquote>
      <h3 id="crash-the-service">
        
        
          <a href="#crash-the-service" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Crash the service!
        
        
      </h3>
    
<p>One of the great benefits of using systemd to manage your services is that you don’t have to worry unnecessarily about bringing a process back up if it crashes. So let’s crash the service! You can do this by either sending a POST request with the json payload <code class="language-plaintext highlighter-rouge">{"crash":"true"}</code> to http://localhost:5000/crash on the VM (Hint: use <code class="language-plaintext highlighter-rouge">cURL</code>) or by killing the webserver manually by sending a signal – both will cause the unit to crash. You can verify if you succeeded by running <code class="language-plaintext highlighter-rouge">systemctl status toy.service</code>, and the unit should either be in an <code class="language-plaintext highlighter-rouge">inactive</code> or <code class="language-plaintext highlighter-rouge">failed</code> state, depending on how you killed it.</p>

<p><strong>Question 4:</strong> What command did you run to crash the service?</p>

<p>Now add the following the <code class="language-plaintext highlighter-rouge">/etc/systemd/system/toy.service</code> under the <code class="language-plaintext highlighter-rouge">Service</code> directive:</p>

<div class="language-systemd highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">Restart</span><span class="p">=</span>always
<span class="nt">RestartSec</span><span class="p">=</span>10
</code></pre></div></div>

<p>To tell systemd that the unit file has changed run <code class="language-plaintext highlighter-rouge">sudo systemctl daemon-reload</code>. Now start your webserver and crash it again in any way you please, and you should see that it come back online after 10 seconds! Note that you can also run <code class="language-plaintext highlighter-rouge">daemon-reload</code> and change a unit file while a service is running.</p>

<p><strong>Question 5:</strong> Upload your fully featured <code class="language-plaintext highlighter-rouge">toy.service</code> file to Gradescope.</p>
      <h2 id="part-2-processes">
        
        
          <a href="#part-2-processes" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Part 2: Processes
        
        
      </h2>
    
<p><strong>There are no Gradescope questions to answer for this section, but you should still go through the steps to make sure you understand processes and how to use htop!</strong></p>

<p>Open up a terminal and run the <code class="language-plaintext highlighter-rouge">ps</code> command. You should see something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  PID TTY          TIME CMD
 3371 pts/2    00:00:00 zsh
 3416 pts/2    00:00:00 ps
</code></pre></div></div>

<p>Now open up <strong>another</strong> terminal and run <code class="language-plaintext highlighter-rouge">sleep 1000 &amp;</code>, which start a sleeping process in the background. Then run <code class="language-plaintext highlighter-rouge">ps</code>. It should look like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~
❯ sleep 100 &amp;
[1] 3726

~
❯ ps
  PID TTY          TIME CMD
 3371 pts/2    00:00:00 zsh
 3726 pts/2    00:00:00 sleep
 3752 pts/2    00:00:00 ps
</code></pre></div></div>

<p>In the <strong>first</strong> terminal run <code class="language-plaintext highlighter-rouge">ps</code> again. You should notice that the <code class="language-plaintext highlighter-rouge">sleep</code> process is not showing up, even though the thousand seconds haven’t expired.</p>

<p>Why do you think this behavior occurs (hint: TTY column)?</p>

<p>We can get the process to display on the first terminal by running <code class="language-plaintext highlighter-rouge">ps -u</code>, which displays all the processes running as your user. Notice the PID column; each process has a unique ID assigned to it by the kernel. One thing we can do with this PID is send signals to the process. <code class="language-plaintext highlighter-rouge">sleep 1000</code> is pretty useless, so go ahead and kill it – <code class="language-plaintext highlighter-rouge">kill 3726</code> (substitute <code class="language-plaintext highlighter-rouge">3726</code> with whatever PID <code class="language-plaintext highlighter-rouge">ps</code> outputted for you).</p>

<p>The most common use of <code class="language-plaintext highlighter-rouge">ps</code> is to run <code class="language-plaintext highlighter-rouge">ps -ef</code> to see all the processes running on the system. Run <code class="language-plaintext highlighter-rouge">ps -e</code> and <code class="language-plaintext highlighter-rouge">ps -f</code> independently to see how the flags work together.</p>
      <h3 id="htop">
        
        
          <a href="#htop" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> htop
        
        
      </h3>
    

<p>Make sure <code class="language-plaintext highlighter-rouge">htop</code> is installed by running <code class="language-plaintext highlighter-rouge">sudo apt install htop</code>. Now, open up a terminal and run the <code class="language-plaintext highlighter-rouge">htop</code> command. <code class="language-plaintext highlighter-rouge">htop</code> can be thought of as a more extensive version of <code class="language-plaintext highlighter-rouge">ps -ef</code>, whereby process stats are updated in real-time.</p>

<p>First press <code class="language-plaintext highlighter-rouge">&lt;F2&gt;</code>, scroll down to Display options, and check “Hide userland process threads.” We won’t be dealing with those in this lab.</p>

<p>Now open up another terminal (or use <code class="language-plaintext highlighter-rouge">tmux</code>). Run the command <code class="language-plaintext highlighter-rouge">yes</code>. It uses a lot of resources as it prints a continuous stream of <code class="language-plaintext highlighter-rouge">y</code>’s.</p>

<p>What resource specifically does the <code class="language-plaintext highlighter-rouge">yes</code> command exhaust? If you are having trouble finding this, press <code class="language-plaintext highlighter-rouge">&lt;</code> to choose which resource to order processes by. Make sure to quit out of <code class="language-plaintext highlighter-rouge">yes</code> (^C) once you are finished.</p>
      <h3 id="the-process-hierarchy">
        
        
          <a href="#the-process-hierarchy" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> The process hierarchy
        
        
      </h3>
    

<p>Run <code class="language-plaintext highlighter-rouge">htop</code> once more. This time click <code class="language-plaintext highlighter-rouge">&lt;F5&gt;</code> to enter Tree View. You should see a visual representation of the process hierarchy on your system, with everything stemming from <code class="language-plaintext highlighter-rouge">/sbin/init</code> (systemd).</p>

<p>For curious students that are interested in seeing a more extensive process hierarchy on a large system, you are encouraged to run <code class="language-plaintext highlighter-rouge">htop</code> on the OCF server <code class="language-plaintext highlighter-rouge">tsunami</code>. Let us know of any cool processes that you find!</p>
      <h3 id="orphan-processes">
        
        
          <a href="#orphan-processes" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Orphan processes
        
        
      </h3>
    

<p>Open a second terminal and <code class="language-plaintext highlighter-rouge">ssh</code> to your VM. Now run <code class="language-plaintext highlighter-rouge">sleep 1000 &amp;</code>. You should see this new process pop into your <code class="language-plaintext highlighter-rouge">htop</code> session on your first terminal. If not, press <code class="language-plaintext highlighter-rouge">&lt;F3&gt;</code> and search for “sleep.” What is its parent?</p>

<p>Select this parent and press <code class="language-plaintext highlighter-rouge">&lt;F9&gt;</code> to kill it. Send the <code class="language-plaintext highlighter-rouge">SIGTERM</code> signal. The sleep process now has <code class="language-plaintext highlighter-rouge">init</code> as its new parent, which is PID 1. What you just did is manually orphan a process; when that happens said process is subsequently re-parented by the <code class="language-plaintext highlighter-rouge">init</code> process.</p>

<p>Now go through the same steps again. This time, send the parent a <code class="language-plaintext highlighter-rouge">SIGHUP</code> (hangup) signal. Can you still find the sleep process? When <code class="language-plaintext highlighter-rouge">SIGHUP</code> is sent to a parent shell, the parent subsequently sends hangup signals to any child processes before terminating; all processes that receive <code class="language-plaintext highlighter-rouge">SIGHUP</code> from a parent shell will terminate – this is one way to avoid creating orphan processes.</p>

<p>If you are interested in learning about the different signals, run <code class="language-plaintext highlighter-rouge">man 7 signal</code>. Note that you can run <code class="language-plaintext highlighter-rouge">man man</code> for an explanation about the different manual section numbers.</p>
      <h2 id="exploration">
        
        
          <a href="#exploration" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Exploration
        
        
      </h2>
    
<p>Congratulations, you have completed the lab! This is just the tip of the iceberg when it comes to processes and services. If you want to learn more, here are some related topics you can look into.</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Init">Wikipedia’s article on init systems</a></li>
  <li><a href="https://felipec.wordpress.com/2013/11/04/init/">The construction of a basic init system</a></li>
  <li><a href="https://engineeringblog.yelp.com/2016/01/dumb-init-an-init-for-docker.html">Yelp’s dumb-init, a lightweight init system for docker containers</a></li>
  <li><a href="https://www.howtogeek.com/119815/htg-explains-what-is-a-zombie-process-on-linux/">Zombie Processes</a></li>
  <li><a href="http://0pointer.de/blog/projects/socket-activated-containers.html">Socket activation</a></li>
  <li>Systemd has been the source of a considerable amount of controversy. <a href="http://without-systemd.org/wiki/index.php/Main_Page">Opponents</a> allege that it violates the Unix philosophy of “do one thing and do it well”, and that it has had too much scope creep, among other complaints.</li>
  <li>Everything you wanted to know about Unix <a href="https://www.win.tue.nl/~aeb/linux/lk/lk-10.html">threads, processes, process groups and sessions</a>. Bear in mind that this document is a little dated when it comes to the code about threads, and its description of what happens when a pseudotty is closed is not actually correct.</li>
</ul>
      <h2 id="submission">
        
        
          <a href="#submission" class="anchor-heading"><svg viewBox="0 0 16 16" aria-hidden="true"><use xlink:href="#svg-link"></use></svg></a> Submission
        
        
      </h2>
    

<p>Go to Gradescope to submit your answers!</p>

        
        <hr>
        <footer>
  <div class="col-lg-12 text-center">
    <p>
      <a href="https://www.nvidia.com/en-us/" class="no-underline">
        <img
          src="/assets/images/nvidia.png"
          style="height: 50px; width: 125px"
        />
      </a>
      <span>
        Thanks to
        <a href="https://www.nvidia.com">Nvidia</a> for sponsoring GPUs to the OCF.
      </span>
    </p>
    <p>
      <a href="https://www.linode.com" class="no-underline">
        <img
          src="/assets/images/linode.png"
          style="height: 50px; width: 125px"
        />
      </a>
      <span>
        Huge thanks to
        <a href="https://www.linode.com">Linode</a> for sponsoring the equipment
        used to record digital lectures for the DeCal.
      </span>
    </p>
    <p>
      <a href="https://www.ocf.berkeley.edu" class="no-underline">
        <img
          src="https://www.ocf.berkeley.edu/hosting-logos/ocf-hosted-penguin.svg"
          alt="Hosted by the OCF"
          style="border: 0"
      /></a>
      <span>
        Copyright &copy; 2017-2024
        <a href="https://www.ocf.berkeley.edu"> Open Computing Facility </a>
        and
        <a href="https://xcf.berkeley.edu"> eXperimental Computing Facility </a>
      </span>
    </p>
    <p>
      <span>
        This website and its course materials are licensed under the terms of the
        <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">
          CC BY-NC-SA 4.0
        </a>
        License.
        <a href="https://github.com/0xcf/decal-web/"> Source Code </a>
        available on GitHub
      </span>
    </p>
  </div>
  <!-- /.col-lg-12 -->
</footer>

      </div>
    </div>
  </div>

  <script>
    function setCookie(cname, cvalue, exdays) {
      const d = new Date();
      d.setTime(d.getTime() + (exdays*24*60*60*1000));
      let expires = "expires="+ d.toUTCString();
      document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
      let name = cname + "=";
      let decodedCookie = decodeURIComponent(document.cookie);
      let ca = decodedCookie.split(';');
      for(let i = 0; i <ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
          c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
          return c.substring(name.length, c.length);
        }
      }
      return "";
    }

    document.getElementById("loading").style["backgroundColor"] = getCookie("dark-mode") == 1 ? "#27262b" : "#ffffff" // Set the opaque layer to the prefered color

    window.addEventListener('load', (event) => {
      document.getElementById("loading").style = ""; // Remove the opaque layer when the page loads
    });


    let dark = !(window.matchMedia && 
    window.matchMedia('(prefers-color-scheme: dark)').matches); // Flip dark so we can run one toggle on load
    
    let preference = getCookie("dark-mode");

    if(preference == "1") {
      dark = false;
    } else if(preference == "0") {
      dark = true;
    }

    let toggleDark = () => { 
      jtd.setTheme(dark ? 'light' : 'dark'); 

      // Change input text placeholder text color

      const PLACEHOLDER_TEXT_COLOR = "#959396";

      if(!dark) {
        let placeholderStyleElem = document.head.appendChild(document.createElement("style"));
        placeholderStyleElem.id = "placeholderTextStyle"
        placeholderStyleElem.innerHTML = "::placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; opacity: 1 }\n"; // Firefox requires opacity
        placeholderStyleElem.innerHTML += ":-ms-input-placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; }\n"; // IE 10+
        placeholderStyleElem.innerHTML += "::-ms-input-placeholder { color: " + PLACEHOLDER_TEXT_COLOR + "; }\n"; // Edge
      } else {
        let placeholderStyleElem = document.getElementById("placeholderTextStyle");
        if(placeholderStyleElem) placeholderStyleElem.remove();
      }

      setCookie("dark-mode", dark ? "0" : "1", 3652); 
      dark = !dark;
    }
    toggleDark();
  </script>
</body>
</html>

